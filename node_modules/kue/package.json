{
  "name": "kue",
  "version": "0.8.9",
  "description": "Feature rich priority job queue backed by redis",
  "homepage": "http://learnboost.github.com/kue/",
  "keywords": [
    "job",
    "queue",
    "worker",
    "redis"
  ],
  "license": "MIT",
  "author": {
    "name": "TJ Holowaychuk",
    "email": "tj@learnboost.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/LearnBoost/kue.git"
  },
  "dependencies": {
    "redis": "~0.10.0",
    "express": "~3.1.1",
    "jade": "1.1.5",
    "stylus": "0.42.2",
    "lodash": "^2.4.1",
    "lodash-deep": "^1.1.0",
    "nib": "0.5.0",
    "reds": "~0.2.4"
  },
  "devDependencies": {
    "should": "~3.0.1",
    "mocha": "~1.17.0",
    "coffee-script": "~1.6.3"
  },
  "main": "index",
  "scripts": {
    "test": "make test-all"
  },
  "readme": "# Kue [![Build Status](https://travis-ci.org/LearnBoost/kue.png)](https://travis-ci.org/LearnBoost/kue) [![NPM version](https://badge.fury.io/js/kue.png)](http://badge.fury.io/js/kue) [![Stories in Ready](https://badge.waffle.io/learnboost/kue.png?label=ready&title=Ready)](https://waffle.io/learnboost/kue)\n\nKue is a priority job queue backed by [redis](http://redis.io), built for [node.js](http://nodejs.org).\n\n**PROTIP** This is the latest Kue documentation, make sure to read the [changelist](History.md) for compatibility.\n\n## Installation\n\n    $ npm install kue\n\n[![NPM](https://nodei.co/npm/kue.png?downloads=true&stars=true)](https://nodei.co/npm/kue/)\n\n## Features\n\n  - Delayed jobs\n  - Distribution of parallel work load\n  - Job event and progress pubsub\n  - Rich integrated UI\n  - Infinite scrolling\n  - UI progress indication\n  - Job specific logging\n  - Powered by Redis\n  - Optional retries with backoff\n  - Full-text search capabilities\n  - RESTful JSON API\n  - Graceful workers shutdown\n\n## Overview\n\n  - [Creating Jobs](#creating-jobs)\n  - [Jobs Priority](#job-priority)\n  - [Failure Attempts](#failure-attempts)\n  - [Failure Backoff](#failure-backoff)\n  - [Job Logs](#job-logs)\n  - [Job Progress](#job-progress)\n  - [Job Events](#job-events)\n  - [Queue Events](#queue-events)\n  - [Delayed Jobs](#delayed-jobs)\n  - [Processing Jobs](#processing-jobs)\n  - [Processing Concurrency](#processing-concurrency)\n  - [Pause Processing](#pause-processing)\n  - [Updating Progress](#updating-progress)\n  - [Graceful Shutdown](#graceful-shutdown)\n  - [Redis Connection Settings](#redis-connection-settings)\n  - [User-Interface](#user-interface)\n  - [JSON API](#json-api)\n  - [Parallel Processing With Cluster](#parallel-processing-with-cluster)\n  - [Securing Kue](#securing-kue)\n  - [Screencasts](#screencasts)\n  - [License](#license)\n\n\n\n## Creating Jobs\n\nFirst create a job `Queue` with `kue.createQueue()`:\n\n```js\nvar kue = require('kue')\n  , jobs = kue.createQueue();\n```\n\nCalling `jobs.create()` with the type of job (\"email\"), and arbitrary job data will return a `Job`, which can then be `save()`ed, adding it to redis, with a default priority level of \"normal\". The `save()` method optionally accepts a callback, responding with an `error` if something goes wrong. The `title` key is special-cased, and will display in the job listings within the UI, making it easier to find a specific job.\n\n```js\nvar job = jobs.create('email', {\n    title: 'welcome email for tj'\n  , to: 'tj@learnboost.com'\n  , template: 'welcome-email'\n}).save( function(err){\n   if( !err ) console.log( job.id );\n});\n```\n\n### Job Priority\n\nTo specify the priority of a job, simply invoke the `priority()` method with a number, or priority name, which is mapped to a number.\n\n```js\njobs.create('email', {\n    title: 'welcome email for tj'\n  , to: 'tj@learnboost.com'\n  , template: 'welcome-email'\n}).priority('high').save();\n```\n\nThe default priority map is as follows:\n\n```js\n{\n    low: 10\n  , normal: 0\n  , medium: -5\n  , high: -10\n  , critical: -15\n};\n```\n\n### Failure Attempts\n\nBy default jobs only have _one_ attempt, that is when they fail, they are marked as a failure, and remain that way until you intervene. However, Kue allows you to specify this, which is important for jobs such as transferring an email, which upon failure, may usually retry without issue. To do this invoke the `.attempts()` method with a number.\n\n```js\n jobs.create('email', {\n     title: 'welcome email for tj'\n   , to: 'tj@learnboost.com'\n   , template: 'welcome-email'\n }).priority('high').attempts(5).save();\n```\n\n### Failure Backoff\nJob retry attempts are done as soon as they fail, with no delay, even if your job had a delay set via `Job#delay`. If you want to delay job re-attempts upon failures (known as backoff) you can use `Job#backoff` method in different ways:\n\n```js\n    // Honor job's original delay (if set) at each attempt, defaults to fixed backoff\n    job.attempts(3).backoff( true )\n\n    // Override delay value, fixed backoff\n    job.attempts(3).backoff( {delay: 60*1000, type:'fixed'} )\n\n    // Enable exponential backoff using original delay (if set)\n    job.attempts(3).backoff( {type:'exponential'} )\n\n    // Use a function to get a customized next attempt delay value\n    job.attempts(3).backoff( function( attempts, delay ){\n      return my_customized_calculated_delay;\n    })\n```\n\nIn the last scenario, provided function will be called on each re-attempt to get current attempt delay value.\n\n### Job Logs\n\nJob-specific logs enable you to expose information to the UI at any point in the job's life-time. To do so simply invoke `job.log()`, which accepts a message string as well as variable-arguments for sprintf-like support:\n\n```js \njob.log('$%d sent to %s', amount, user.name);\n``` \n\n### Job Progress\n\nJob progress is extremely useful for long-running jobs such as video conversion. To update the job's progress simply invoke `job.progress(completed, total)`:\n\n```js\njob.progress(frames, totalFrames);\n```\n\n### Job Events\n\nJob-specific events are fired on the `Job` instances via Redis pubsub. The following events are currently supported:\n\n    - `failed` the job has failed and has no remaining attempts\n    - 'failed attempt' the job has failed, but has remaining attempts yet\n    - `complete` the job has completed\n    - `promotion` the job (when delayed) is now queued\n    - `progress` the job's progress ranging from 0-100\n\nFor example this may look something like the following:\n\n```js\nvar job = jobs.create('video conversion', {\n    title: 'converting loki\\'s to avi'\n  , user: 1\n  , frames: 200\n});\n\njob.on('complete', function(result){\n  console.log(\"Job completed with data \", result);\n}).on('failed', function(){\n  console.log(\"Job failed\");\n}).on('progress', function(progress){\n  process.stdout.write('\\r  job #' + job.id + ' ' + progress + '% complete');\n});\n```\n\n**Note** that Job level events are not guaranteed to be received upon worker process restarts, since the process will lose the reference to the specific Job object. If you want a more reliable event handler look for [Queue Events](#queue-events).\n\n### Queue Events\n\nQueue-level events provide access to the job-level events previously mentioned, however scoped to the `Queue` instance to apply logic at a \"global\" level. An example of this is removing completed jobs:\n \n```js\njobs.on('job complete', function(id,result){\n  kue.Job.get(id, function(err, job){\n    if (err) return;\n    job.remove(function(err){\n      if (err) throw err;\n      console.log('removed completed job #%d', job.id);\n    });\n  });\n});\n```\n\nThe events available are the same as mentioned in \"Job Events\", however prefixed with \"job \". \n\n### Delayed Jobs\n\nDelayed jobs may be scheduled to be queued for an arbitrary distance in time by invoking the `.delay(ms)` method, passing the number of milliseconds relative to _now_. This automatically flags the `Job` as \"delayed\". \n\n```js\nvar email = jobs.create('email', {\n    title: 'Account renewal required'\n  , to: 'tj@learnboost.com'\n  , template: 'renewal-email'\n}).delay(milliseconds)\n  .priority('high')\n  .save();\n```\n\nWhen using delayed jobs, we must also check the delayed jobs with a timer, promoting them if the scheduled delay has been exceeded. This `setInterval` is defined within `Queue#promote(ms,limit)`, defaulting to a check of top 200 jobs every 5 seconds.\n\n```js\njobs.promote();\n```\n\n## Processing Jobs\n\nProcessing jobs is simple with Kue. First create a `Queue` instance much like we do for creating jobs, providing us access to redis etc, then invoke `jobs.process()` with the associated type.\nNote that unlike what the name `createQueue` suggests, it currently returns a singleton `Queue` instance. So you can configure and use only a single `Queue` object within your node.js process.\n\nIn the following example we pass the callback `done` to `email`, When an error occurs we invoke `done(err)` to tell Kue something happened, otherwise we invoke `done()` only when the job is complete. If this function responds with an error it will be displayed in the UI and the job will be marked as a failure.\n\n```js\nvar kue = require('kue')\n , jobs = kue.createQueue();\n\njobs.process('email', function(job, done){\n  email(job.data.to, done);\n});\n```\n\nWorkers can pass job result as the second parameter to done `done(null,result)` to store that in `Job.result` key. `result` is also passed through `complete` event handlers so that job producers can receive it if they like to.\n\n### Processing Concurrency\n\nBy default a call to `jobs.process()` will only accept one job at a time for processing. For small tasks like sending emails this is not ideal, so we may specify the maximum active jobs for this type by passing a number:\n \n```js\njobs.process('email', 20, function(job, done){\n  // ...\n});\n```\n\n### Pause Processing\n\nWorkers can temporary pause and resume their activity. It is, after calling `pause` they will receive no jobs in their process callback until `resume` is called. `pause` function gracefully shutdowns this worker, and uses the same internal functionality as `shutdown` method in [Graceful Shutdown](#graceful-shutdown).\n\n```js\njobs.process('email', function(job, done, ctx){\n  ctx.pause( function(err){\n    console.log(\"Worker is paused... \");\n    setTimeout( function(){ ctx.resume(); }, 10000 );\n  }, 5000);\n});\n```\n\n### Updating Progress\n\nFor a \"real\" example, let's say we need to compile a PDF from numerous slides with [node-canvas](http://github.com/learnboost/node-canvas). Our job may consist of the following data, note that in general you should _not_ store large data in the job it-self, it's better to store references like ids, pulling them in while processing.\n \n```js\njobs.create('slideshow pdf', {\n    title: user.name + \"'s slideshow\"\n  , slides: [...] // keys to data stored in redis, mongodb, or some other store\n});\n```\n\nWe can access this same arbitrary data within a separate process while processing, via the `job.data` property. In the example we render each slide one-by-one, updating the job's log and process.\n\n```js\njobs.process('slideshow pdf', 5, function(job, done){\n  var slides = job.data.slides\n    , len = slides.length;\n\n  function next(i) {\n    var slide = slides[i]; // pretend we did a query on this slide id ;)\n    job.log('rendering %dx%d slide', slide.width, slide.height);\n    renderSlide(slide, function(err){\n      if (err) return done(err);\n      job.progress(i, len);\n      if (i == len) done()\n      else next(i + 1);\n    });\n  }\n\n  next(0);\n});\n```\n\n### Graceful Shutdown\n\nAs of Kue 0.7.0, a `Queue#shutdown(fn, timeout)` is added which signals all workers to stop processing after their current active job is done. Workers will wait `timeout` milliseconds for their active job's done to be called or mark the active job `failed` with shutdown error reason. When all workers tell Kue they are stopped `fn` is called.\n\n```javascript\nvar queue = require('kue').createQueue();\n\nprocess.once( 'SIGTERM', function ( sig ) {\n  queue.shutdown(function(err) {\n    console.log( 'Kue is shut down.', err||'' );\n    process.exit( 0 );\n  }, 5000 );\n});\n```\n\n## Redis Connection Settings\n\nBy default, Kue will connect to Redis using the client default settings (port defaults to `6379`, host defaults to `127.0.0.1`, prefix defaults to `q`). `Queue#createQueue(options)` accepts redis connection options in `options.redis` key.\n\n```javascript\nvar kue = require('kue');\nvar q = kue.createQueue({\n  prefix: 'q',\n  redis: {\n    port: 1234,\n    host: '10.0.50.20',\n    auth: 'password',\n    db: 3, // if provided select a non-default redis db\n    options: {\n      // see https://github.com/mranney/node_redis#rediscreateclientport-host-options\n    }\n  }\n});\n```\n\n`prefix` controls the key names used in Redis.  By default, this is simply `q`. Prefix generally shouldn't be changed unless you need to use one Redis instance for multiple apps. It can also be useful for providing an isolated testbed across your main application.\n\n#### Connecting using Unix Domain Sockets\n\nSince [node_redis](https://github.com/mranney/node_redis) supports Unix Domain Sockets, you can also tell Kue to do so. See [unix-domain-socket](https://github.com/mranney/node_redis#unix-domain-socket) for your redis server configuration.\n\n```javascript\nvar kue = require('kue');\nvar q = kue.createQueue({\n  prefix: 'q',\n  redis: {\n    socket: '/data/sockets/redis.sock',\n    auth: 'password',\n    options: {\n      // see https://github.com/mranney/node_redis#rediscreateclientport-host-options\n    }\n  }\n});\n```\n\n#### Replacing Redis Client Module\n\nAny node.js redis client library that conforms (or when adapted) to  [node_redis](https://github.com/mranney/node_redis) API can be injected into Kue. You should only provide a `createClientFactory` function as a redis connection factory instead of providing node_redis connection options.\n\nBelow is a sample code to enable [redis-sentinel](https://github.com/ortoo/node-redis-sentinel) to connect to [Redis Sentinel](http://redis.io/topics/sentinel) for automatic master/slave failover.\n\n```javascript\nvar kue = require('kue');\nvar Sentinel = require('redis-sentinel');\nvar endpoints = [\n  {host: '192.168.1.10', port: 6379},\n  {host: '192.168.1.11', port: 6379}\n];\nvar opts = options || {}; // Standard node_redis client options\nvar masterName = 'mymaster';\nvar sentinel = Sentinel.Sentinel(endpoints);\n\nvar q = kue.createQueue({\n   redis: {\n      createClientFactory: function(){\n         return sentinel.createClient(masterName, opts);\n      }\n   }\n});\n```\n\n**Note** *that all `<0.8.x` client codes should be refactored to pass redis options to `Queue#createQueue` instead of monkey patched style overriding of `redis#createClient` or they will be broken from Kue `0.8.x`.*\n\n## User-Interface\n\nThe UI is a small [Express](http://github.com/visionmedia/express) application, to fire it up simply run the following, altering the port etc as desired.\n\n```js\nvar kue = require('kue');\nkue.createQueue(...);\nkue.app.listen(3000);\n```\n\nThe title defaults to \"Kue\", to alter this invoke:\n\n```js\nkue.app.set('title', 'My Application');\n```\n\n**Note** *that if you are using non-default Kue options, `kue.createQueue(...)` must be called before accessing `kue.app`.*\n\n## JSON API\n\nAlong with the UI Kue also exposes a JSON API, which is utilized by the UI.\n\n### GET /job/search?q=\n\nQuery jobs, for example \"GET /job/search?q=avi video\":\n\n```js\n[\"5\", \"7\", \"10\"]\n```\n\nBy default kue indexes the whole Job data object for searching, but this can be customized via calling `Job#searchKeys` to tell kue which keys on Job data to create index for:\n\n```javascript\nvar kue = require('kue');\njobs = kue.createQueue();\njobs.create('email', {\n    title: 'welcome email for tj'\n  , to: 'tj@learnboost.com'\n  , template: 'welcome-email'\n}).searchKeys( ['to', 'title'] ).save();\n```\n\nYou may also fully disable search indexes for redis memory optimization:\n\n```javascript\nvar kue = require('kue');\nq = kue.createQueue({\n    disableSearch: true\n});\n```\n\n### GET /stats\n\nCurrently responds with state counts, and worker activity time in milliseconds:\n\n```js\n{\"inactiveCount\":4,\"completeCount\":69,\"activeCount\":2,\"failedCount\":0,\"workTime\":20892}\n```\n\n### GET /job/:id\n\nGet a job by `:id`:\n\n```js\n{\"id\":\"3\",\"type\":\"email\",\"data\":{\"title\":\"welcome email for tj\",\"to\":\"tj@learnboost.com\",\"template\":\"welcome-email\"},\"priority\":-10,\"progress\":\"100\",\"state\":\"complete\",\"attempts\":null,\"created_at\":\"1309973155248\",\"updated_at\":\"1309973155248\",\"duration\":\"15002\"}\n```\n\n### GET /job/:id/log\n\nGet job `:id`'s log:\n  \n```js\n['foo', 'bar', 'baz']\n```\n\n### GET /jobs/:from..:to/:order?\n\nGet jobs with the specified range `:from` to `:to`, for example \"/jobs/0..2\", where `:order` may be \"asc\" or \"desc\":\n\n```js\n[{\"id\":\"12\",\"type\":\"email\",\"data\":{\"title\":\"welcome email for tj\",\"to\":\"tj@learnboost.com\",\"template\":\"welcome-email\"},\"priority\":-10,\"progress\":0,\"state\":\"active\",\"attempts\":null,\"created_at\":\"1309973299293\",\"updated_at\":\"1309973299293\"},{\"id\":\"130\",\"type\":\"email\",\"data\":{\"title\":\"welcome email for tj\",\"to\":\"tj@learnboost.com\",\"template\":\"welcome-email\"},\"priority\":-10,\"progress\":0,\"state\":\"active\",\"attempts\":null,\"created_at\":\"1309975157291\",\"updated_at\":\"1309975157291\"}]\n```\n\n### GET /jobs/:state/:from..:to/:order?\n\nSame as above, restricting by `:state` which is one of:\n  \n    - active\n    - inactive\n    - failed\n    - complete\n\n### GET /jobs/:type/:state/:from..:to/:order?\n\nSame as above, however restricted to `:type` and `:state`.\n\n### DELETE /job/:id\n\nDelete job `:id`:\n  \n    $ curl -X DELETE http://local:3000/job/2\n    {\"message\":\"job 2 removed\"}\n\n### POST /job\n\nCreate a job:\n\n    $ curl -H \"Content-Type: application/json\" -X POST -d \\\n        '{\n           \"type\": \"email\",\n           \"data\": {\n             \"title\": \"welcome email for tj\",\n             \"to\": \"tj@learnboost.com\",\n             \"template\": \"welcome-email\"\n           },\n           \"options\" : {\n             \"attempts\": 5,\n             \"priority\": \"high\"\n           }\n         }' http://localhost:3000/job\n    {\"message\":\"job 3 created\"}\n\n\n## Parallel Processing With Cluster\n\nThe example below shows how you may use [Cluster](http://nodejs.org/api/cluster.html) to spread the job processing load across CPUs. Please see [Cluster module's documentation](http://nodejs.org/api/cluster.html) for more detailed examples on using it.\n \nWhen cluster `.isMaster` the file is being executed in context of the master process, in which case you may perform tasks that you only want once, such as starting the web app bundled with Kue. The logic in the `else` block is executed _per worker_. \n\n```js\nvar kue = require('kue')\n  , cluster = require('cluster')\n  , jobs = kue.createQueue();\n\nvar clusterWorkerSize = require('os').cpus().length;\n\nif (cluster.isMaster) {\n  kue.app.listen(3000);\n  for (var i = 0; i < clusterWorkerSize; i++) {\n    cluster.fork();\n  }\n} else {\n  jobs.process('email', 10, function(job, done){\n    var pending = 5\n      , total = pending;\n\n    var interval = setInterval(function(){\n      job.log('sending!');\n      job.progress(total - pending, total);\n      --pending || done();\n      pending || clearInterval(interval);\n    }, 1000);\n  });\n}\n```\n\nThis will create an `email` job processor (worker) per each of your machine CPU cores, with each you can handle 10 concurrent email jobs, leading to total `10 * N` concurrent email jobs processed in your `N` core machine.\n\nNow when you visit Kue's UI in the browser you'll see that jobs are being processed roughly `N` times faster! (if you have `N` cores).\n\n## Securing Kue\n\nThrough the use of app mounting you may customize the web application, enabling TLS, or adding additional middleware like Connect's `basicAuth()`.\n\n```js\nvar app = express.createServer({ ... tls options ... });\napp.use(express.basicAuth('foo', 'bar'));\napp.use(kue.app);\napp.listen(3000);\n```\n\n## Screencasts\n\n  - [Introduction](http://www.screenr.com/oyNs) to Kue\n  - API [walkthrough](http://vimeo.com/26963384) to Kue\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2011 LearnBoost &lt;tj@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/LearnBoost/kue/issues"
  },
  "_id": "kue@0.8.9",
  "_from": "kue@"
}
